// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id
  firstname        String?             @db.VarChar(250)
  lastname         String?             @db.VarChar(250)
  email            String              @unique @db.VarChar(250)
  password         String?
  birthdate        DateTime?
  bio              String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  roles            RolesOnUsers[]
  avatar           Avatar[]
  posts            Post[]
  provider_id      String?             @unique
  providerName     String?
  reactionsOnPosts ReactionsOnPosts[]
  reviews          Review[]
  following_topics CategoriesOnUsers[]

  @@map("users")
}

model Role {
  id          Int            @id @default(autoincrement())
  title       String
  users       RolesOnUsers[]
  createdAt   DateTime       @default(now())
  updateAt    DateTime       @updatedAt
  permissions Permission[]

  @@map("roles")
}

model RolesOnUsers {
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  role_id Int
  role    Role   @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
}

model Permission {
  id                     Int                      @id @default(autoincrement())
  table_name             String
  role_id                Int
  role                   Role                     @relation(fields: [role_id], references: [id])
  privilegesOnPermission PrivilegesOnPermission[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model Privilege {
  id                     Int                      @id @default(autoincrement())
  title                  String
  privilegesOnPermission PrivilegesOnPermission[]
}

model PrivilegesOnPermission {
  privilege_id  Int
  privilege     Privilege  @relation(fields: [privilege_id], references: [id])
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@id([privilege_id, permission_id])
}

model Avatar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  filename  String   @db.VarChar(150)
  path      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String

  @@map("avatars")
}

model Review {
  id          Int      @id @default(autoincrement())
  weight      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post_id     String
  post        Post     @relation(fields: [post_id], references: [id])
  reviewer_id String
  reviewer    User     @relation(fields: [reviewer_id], references: [id])

  @@map("reviews")
}

model Post {
  id             String              @id
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  read_time      Int
  title          String
  content        String
  cover_photo    String?
  category       CategoriesOnPosts[]
  author_id      String
  author         User                @relation(fields: [author_id], references: [id])
  reaction       ReactionsOnPosts[]
  tag            TagsOnPosts[]
  review         Review[]
  review_average Float               @default(0)

  @@map("posts")
}

model Category {
  id          Int                 @id @default(autoincrement())
  designation String
  post        CategoriesOnPosts[]
  followedBy  CategoriesOnUsers[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("categories")
}

model CategoriesOnUsers {
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  Category    Category @relation(fields: [category_id], references: [id])
  category_id Int

  @@id([user_id, category_id])
}

model Tag {
  id          Int           @id @default(autoincrement())
  designation String        @unique
  post        TagsOnPosts[]
}

model Reaction {
  id        Int                @id
  type      ReactionEnum
  post      ReactionsOnPosts[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ReactionsOnPosts {
  post_id     String
  reaction_id Int
  post        Post     @relation(fields: [post_id], references: [id])
  reaction    Reaction @relation(fields: [reaction_id], references: [id])
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  @@id([post_id, reaction_id, user_id])
}

model TagsOnPosts {
  postId String
  tagId  Int
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model CategoriesOnPosts {
  post_id     String
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  post        Post     @relation(fields: [post_id], references: [id])

  @@id([post_id, category_id])
}

enum ReactionEnum {
  like
  love
}
