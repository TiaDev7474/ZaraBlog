// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id
  firstname        String?            @db.VarChar(250)
  lastname         String?            @db.VarChar(250)
  email            String             @unique @db.VarChar(250)
  password         String?
  birthdate        DateTime?
  bio              String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  roles            RolesOnUsers[]
  avatar           Avatar[]
  posts            Post[]
  providerId       String?            @unique
  providerName     String?
  reactionsOnPosts ReactionsOnPosts[]

  @@map("users")
}

model Role {
  id          Int            @id @default(autoincrement())
  title       String
  users       RolesOnUsers[]
  createdAT   DateTime       @default(now())
  updateAt    DateTime       @updatedAt
  permissions Permission[]

  @@map("roles")
}

model RolesOnUsers {
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  role_id Int
  role    Role   @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
}

model Permission {
  id                     Int                      @id @default(autoincrement())
  table_name             String
  role_id                Int
  role                   Role                     @relation(fields: [role_id], references: [id])
  privilege              Privilege[]
  privilegesOnPermission PrivilegesOnPermission[]
}

model Privilege {
  id                     Int                      @id @default(autoincrement())
  title                  String
  Permission             Permission?              @relation(fields: [permissionId], references: [id])
  permissionId           Int?
  privilegesOnPermission PrivilegesOnPermission[]
}

model PrivilegesOnPermission {
  privilege_id  Int
  privilege     Privilege  @relation(fields: [privilege_id], references: [id])
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])

  @@id([privilege_id, permission_id])
}

model Avatar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  filename  String   @db.VarChar(150)
  path      String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String

  @@map("avatars")
}

model Post {
  id          String              @id
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  read_time   Int
  title       String
  content     String
  cover_photo String?
  category    CategoriesOnPosts[]
  authorId    String
  author      User                @relation(fields: [authorId], references: [id])
  reaction    ReactionsOnPosts[]
  tag         TagsOnPosts[]

  @@map("posts")
}

model Category {
  id   Int                 @id @default(autoincrement())
  name String
  post CategoriesOnPosts[]

  @@map("categories")
}

model Tag {
  id          Int           @id @default(autoincrement())
  designation String
  post        TagsOnPosts[]
}

model Reaction {
  id   Int                @id
  type ReactionEnum
  post ReactionsOnPosts[]
}

model ReactionsOnPosts {
  postId     String
  reactionId Int
  post       Post     @relation(fields: [postId], references: [id])
  reaction   Reaction @relation(fields: [reactionId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@id([postId, reactionId, userId])
}

model TagsOnPosts {
  postId String
  tagId  Int
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model CategoriesOnPosts {
  postId     String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

enum ReactionEnum {
  like
  love
}
